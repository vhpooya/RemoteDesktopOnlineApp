/**
 * مدیریت آمار اتصال WebRTC
 */
class WebRTCStatsManager {
    constructor(peerConnection, hubConnection, sessionId, updateInterval = 1000) {
        this.peerConnection = peerConnection;
        this.hubConnection = hubConnection;
        this.sessionId = sessionId;
        this.updateInterval = updateInterval;
        this.statsTimer = null;
        this.isMonitoring = false;
        this.lastStats = {
            timestamp: new Date(),
            bytesReceived: 0,
            bytesSent: 0
        };
        
        // متریک‌های فعلی
        this.currentMetrics = {
            bandwidthUsage: 0,
            latencyMs: 0,
            fps: 0,
            packetLoss: 0,
            resolution: '',
            videoCodec: '',
            audioCodec: '',
            cpuUsage: 0,
            memoryUsageMB: 0
        };
        
        // ثبت رویداد دریافت آمار از سرور
        this.hubConnection.on("ReceiveConnectionStats", (stats) => {
            this.updateUIWithStats(stats);
        });
    }
    
    /**
     * شروع مانیتورینگ آمار اتصال
     */
    startMonitoring() {
        if (this.isMonitoring) return;
        
        this.isMonitoring = true;
        this.collectAndSendStats();
        
        // راه‌اندازی تایمر برای جمع‌آوری مستمر آمار
        this.statsTimer = setInterval(() => {
            this.collectAndSendStats();
        }, this.updateInterval);
        
        console.log('WebRTC stats monitoring started');
    }
    
    /**
     * توقف مانیتورینگ آمار اتصال
     */
    stopMonitoring() {
        if (!this.isMonitoring) return;
        
        this.isMonitoring = false;
        clearInterval(this.statsTimer);
        this.statsTimer = null;
        
        console.log('WebRTC stats monitoring stopped');
    }
    
    /**
     * جمع‌آوری و ارسال آمار اتصال به سرور
     */
    async collectAndSendStats() {
        if (!this.peerConnection || this.peerConnection.connectionState === 'closed') {
            this.stopMonitoring();
            return;
        }
        
        try {
            // دریافت آمار از RTCPeerConnection
            const stats = await this.peerConnection.getStats();
            
            // پردازش آمار دریافتی
            this.processStats(stats);
            
            // ارسال آمار به سرور
            await this.sendStatsToServer();
        } catch (error) {
            console.error('Error collecting WebRTC stats:', error);
        }
    }
    
    /**
     * پردازش آمار دریافتی از WebRTC
     */
    processStats(stats) {
        const now = new Date();
        let bytesReceived = 0;
        let bytesSent = 0;
        let packetsLost = 0;
        let packetsReceived = 0;
        let currentRtt = 0;
        
        stats.forEach(report => {
            if (report.type === 'inbound-rtp' && !report.isRemote) {
                // آمار ورودی RTP
                bytesReceived += report.bytesReceived || 0;
                packetsLost += report.packetsLost || 0;
                packetsReceived += report.packetsReceived || 0;
                
                // محاسبه FPS برای ویدیو
                if (report.kind === 'video' && report.framesDecoded && report.framesPerSecond) {
                    this.currentMetrics.fps = report.framesPerSecond;
                }
                
                // اطلاعات کدک
                if (report.kind === 'video') {
                    this.currentMetrics.videoCodec = report.codecId;
                } else if (report.kind === 'audio') {
                    this.currentMetrics.audioCodec = report.codecId;
                }
            } 
            else if (report.type === 'outbound-rtp' && !report.isRemote) {
                // آمار خروجی RTP
                bytesSent += report.bytesSent || 0;
            }
            else if (report.type === 'track' && report.kind === 'video' && report.frameWidth && report.frameHeight) {
                // وضوح ویدیو
                this.currentMetrics.resolution = `${report.frameWidth}x${report.frameHeight}`;
            }
            else if (report.type === 'candidate-pair' && report.currentRoundTripTime) {
                // زمان تاخیر
                currentRtt = report.currentRoundTripTime * 1000; // تبدیل به میلی‌ثانیه
            }
        });
        
        // محاسبه پهنای باند مصرفی (کیلوبیت بر ثانیه)
        const timeDiffMs = now - this.lastStats.timestamp;
        if (timeDiffMs > 0) {
            const bytesReceivedDiff = bytesReceived - this.lastStats.bytesReceived;
            const bytesSentDiff = bytesSent - this.lastStats.bytesSent;
            const totalBytesDiff = bytesReceivedDiff + bytesSentDiff;
            
            // تبدیل بایت بر میلی‌ثانیه به کیلوبیت بر ثانیه
            this.currentMetrics.bandwidthUsage = (totalBytesDiff * 8) / (timeDiffMs / 1000) / 1000;
        }
        
        // محاسبه درصد از دست رفتن بسته‌ها
        if (packetsReceived > 0) {
            this.currentMetrics.packetLoss = (packetsLost / (packetsReceived + packetsLost)) * 100;
        }
        
        // تنظیم زمان تاخیر
        this.currentMetrics.latencyMs = currentRtt;
        
        // ذخیره آمار برای محاسبه بعدی
        this.lastStats = {
            timestamp: now,
            bytesReceived: bytesReceived,
            bytesSent: bytesSent
        };
        
        // برای اهداف نمایشی، مقادیر CPU و حافظه را شبیه‌سازی می‌کنیم
        // در محیط واقعی، این مقادیر باید از سیستم عامل دریافت شوند
        this.currentMetrics.cpuUsage = Math.random() * 40 + 10; // بین 10% تا 50%
        this.currentMetrics.memoryUsageMB = Math.random